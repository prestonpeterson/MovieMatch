// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: movie_match.proto

#include "movie_match.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

class MovieOpinionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MovieOpinion> _instance;
} _MovieOpinion_default_instance_;
class MovieListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MovieList> _instance;
} _MovieList_default_instance_;
static void InitDefaultsMovieOpinion_movie_5fmatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MovieOpinion_default_instance_;
    new (ptr) ::MovieOpinion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MovieOpinion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MovieOpinion_movie_5fmatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMovieOpinion_movie_5fmatch_2eproto}, {}};

static void InitDefaultsMovieList_movie_5fmatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MovieList_default_instance_;
    new (ptr) ::MovieList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MovieList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MovieList_movie_5fmatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMovieList_movie_5fmatch_2eproto}, {}};


// ===================================================================

void MovieOpinion::InitAsDefaultInstance() {
}
class MovieOpinion::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovieOpinion::kUserIdFieldNumber;
const int MovieOpinion::kMovieNameFieldNumber;
const int MovieOpinion::kThumbsUpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovieOpinion::MovieOpinion()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MovieOpinion)
}
MovieOpinion::MovieOpinion(const MovieOpinion& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  movie_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.movie_name().size() > 0) {
    movie_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.movie_name_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thumbs_up_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(thumbs_up_));
  // @@protoc_insertion_point(copy_constructor:MovieOpinion)
}

void MovieOpinion::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MovieOpinion_movie_5fmatch_2eproto.base);
  movie_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thumbs_up_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(thumbs_up_));
}

MovieOpinion::~MovieOpinion() {
  // @@protoc_insertion_point(destructor:MovieOpinion)
  SharedDtor();
}

void MovieOpinion::SharedDtor() {
  movie_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MovieOpinion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovieOpinion& MovieOpinion::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MovieOpinion_movie_5fmatch_2eproto.base);
  return *internal_default_instance();
}


void MovieOpinion::Clear() {
// @@protoc_insertion_point(message_clear_start:MovieOpinion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  movie_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thumbs_up_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(thumbs_up_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MovieOpinion::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MovieOpinion*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string movie_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_movie_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool thumbs_up = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_thumbs_up(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MovieOpinion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:MovieOpinion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string movie_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_movie_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->movie_name().data(), static_cast<int>(this->movie_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MovieOpinion.movie_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool thumbs_up = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &thumbs_up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MovieOpinion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MovieOpinion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MovieOpinion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MovieOpinion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // string movie_name = 2;
  if (this->movie_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->movie_name().data(), static_cast<int>(this->movie_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MovieOpinion.movie_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->movie_name(), output);
  }

  // bool thumbs_up = 3;
  if (this->thumbs_up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->thumbs_up(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:MovieOpinion)
}

size_t MovieOpinion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MovieOpinion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string movie_name = 2;
  if (this->movie_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->movie_name());
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // bool thumbs_up = 3;
  if (this->thumbs_up() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovieOpinion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MovieOpinion*>(&from));
}

void MovieOpinion::MergeFrom(const MovieOpinion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MovieOpinion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.movie_name().size() > 0) {

    movie_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.movie_name_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.thumbs_up() != 0) {
    set_thumbs_up(from.thumbs_up());
  }
}

void MovieOpinion::CopyFrom(const MovieOpinion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MovieOpinion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieOpinion::IsInitialized() const {
  return true;
}

void MovieOpinion::Swap(MovieOpinion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovieOpinion::InternalSwap(MovieOpinion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  movie_name_.Swap(&other->movie_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
  swap(thumbs_up_, other->thumbs_up_);
}

::std::string MovieOpinion::GetTypeName() const {
  return "MovieOpinion";
}


// ===================================================================

void MovieList::InitAsDefaultInstance() {
}
class MovieList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovieList::kMovieNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovieList::MovieList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MovieList)
}
MovieList::MovieList(const MovieList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      movie_names_(from.movie_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MovieList)
}

void MovieList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MovieList_movie_5fmatch_2eproto.base);
}

MovieList::~MovieList() {
  // @@protoc_insertion_point(destructor:MovieList)
  SharedDtor();
}

void MovieList::SharedDtor() {
}

void MovieList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovieList& MovieList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MovieList_movie_5fmatch_2eproto.base);
  return *internal_default_instance();
}


void MovieList::Clear() {
// @@protoc_insertion_point(message_clear_start:MovieList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  movie_names_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MovieList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MovieList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string movie_names = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName(nullptr);
          object = msg->add_movie_names();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MovieList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:MovieList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string movie_names = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_movie_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->movie_names(this->movie_names_size() - 1).data(),
            static_cast<int>(this->movie_names(this->movie_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MovieList.movie_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MovieList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MovieList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MovieList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MovieList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string movie_names = 1;
  for (int i = 0, n = this->movie_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->movie_names(i).data(), static_cast<int>(this->movie_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MovieList.movie_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->movie_names(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:MovieList)
}

size_t MovieList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MovieList)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string movie_names = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->movie_names_size());
  for (int i = 0, n = this->movie_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->movie_names(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovieList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MovieList*>(&from));
}

void MovieList::MergeFrom(const MovieList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MovieList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  movie_names_.MergeFrom(from.movie_names_);
}

void MovieList::CopyFrom(const MovieList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MovieList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieList::IsInitialized() const {
  return true;
}

void MovieList::Swap(MovieList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovieList::InternalSwap(MovieList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  movie_names_.InternalSwap(CastToBase(&other->movie_names_));
}

::std::string MovieList::GetTypeName() const {
  return "MovieList";
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::MovieOpinion* Arena::CreateMaybeMessage< ::MovieOpinion >(Arena* arena) {
  return Arena::CreateInternal< ::MovieOpinion >(arena);
}
template<> PROTOBUF_NOINLINE ::MovieList* Arena::CreateMaybeMessage< ::MovieList >(Arena* arena) {
  return Arena::CreateInternal< ::MovieList >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
